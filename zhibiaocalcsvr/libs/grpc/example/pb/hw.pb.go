// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hw.proto

/*
Package hellworld is a generated protocol buffer package.

It is generated from these files:
	hw.proto

It has these top-level messages:
	RpcTestRequest
	RpcHBRequest
	RpcHBResponse
	RpcTestResponse
	TestMessage
*/
package hellworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RpcTestRequest struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *RpcTestRequest) Reset()                    { *m = RpcTestRequest{} }
func (m *RpcTestRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcTestRequest) ProtoMessage()               {}
func (*RpcTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RpcTestRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RpcTestRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type RpcHBRequest struct {
}

func (m *RpcHBRequest) Reset()                    { *m = RpcHBRequest{} }
func (m *RpcHBRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcHBRequest) ProtoMessage()               {}
func (*RpcHBRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RpcHBResponse struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RpcHBResponse) Reset()                    { *m = RpcHBResponse{} }
func (m *RpcHBResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcHBResponse) ProtoMessage()               {}
func (*RpcHBResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RpcHBResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RpcTestResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RpcTestResponse) Reset()                    { *m = RpcTestResponse{} }
func (m *RpcTestResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcTestResponse) ProtoMessage()               {}
func (*RpcTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RpcTestResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RpcTestResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TestMessage struct {
	Id        int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Id2       []int32          `protobuf:"varint,3,rep,packed,name=id2" json:"id2,omitempty"`
	Mapvalues map[int32]string `protobuf:"bytes,4,rep,name=mapvalues" json:"mapvalues,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TestMessage) Reset()                    { *m = TestMessage{} }
func (m *TestMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()               {}
func (*TestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TestMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TestMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestMessage) GetId2() []int32 {
	if m != nil {
		return m.Id2
	}
	return nil
}

func (m *TestMessage) GetMapvalues() map[int32]string {
	if m != nil {
		return m.Mapvalues
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcTestRequest)(nil), "hellworld.RpcTestRequest")
	proto.RegisterType((*RpcHBRequest)(nil), "hellworld.RpcHBRequest")
	proto.RegisterType((*RpcHBResponse)(nil), "hellworld.RpcHBResponse")
	proto.RegisterType((*RpcTestResponse)(nil), "hellworld.RpcTestResponse")
	proto.RegisterType((*TestMessage)(nil), "hellworld.TestMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcTestService service

type RpcTestServiceClient interface {
	Hello(ctx context.Context, in *RpcTestRequest, opts ...grpc.CallOption) (*RpcTestResponse, error)
	HB(ctx context.Context, opts ...grpc.CallOption) (RpcTestService_HBClient, error)
}

type rpcTestServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcTestServiceClient(cc *grpc.ClientConn) RpcTestServiceClient {
	return &rpcTestServiceClient{cc}
}

func (c *rpcTestServiceClient) Hello(ctx context.Context, in *RpcTestRequest, opts ...grpc.CallOption) (*RpcTestResponse, error) {
	out := new(RpcTestResponse)
	err := grpc.Invoke(ctx, "/hellworld.RpcTestService/hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcTestServiceClient) HB(ctx context.Context, opts ...grpc.CallOption) (RpcTestService_HBClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RpcTestService_serviceDesc.Streams[0], c.cc, "/hellworld.RpcTestService/HB", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcTestServiceHBClient{stream}
	return x, nil
}

type RpcTestService_HBClient interface {
	Send(*RpcHBRequest) error
	Recv() (*RpcHBResponse, error)
	grpc.ClientStream
}

type rpcTestServiceHBClient struct {
	grpc.ClientStream
}

func (x *rpcTestServiceHBClient) Send(m *RpcHBRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcTestServiceHBClient) Recv() (*RpcHBResponse, error) {
	m := new(RpcHBResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RpcTestService service

type RpcTestServiceServer interface {
	Hello(context.Context, *RpcTestRequest) (*RpcTestResponse, error)
	HB(RpcTestService_HBServer) error
}

func RegisterRpcTestServiceServer(s *grpc.Server, srv RpcTestServiceServer) {
	s.RegisterService(&_RpcTestService_serviceDesc, srv)
}

func _RpcTestService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcTestServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hellworld.RpcTestService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcTestServiceServer).Hello(ctx, req.(*RpcTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcTestService_HB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcTestServiceServer).HB(&rpcTestServiceHBServer{stream})
}

type RpcTestService_HBServer interface {
	Send(*RpcHBResponse) error
	Recv() (*RpcHBRequest, error)
	grpc.ServerStream
}

type rpcTestServiceHBServer struct {
	grpc.ServerStream
}

func (x *rpcTestServiceHBServer) Send(m *RpcHBResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcTestServiceHBServer) Recv() (*RpcHBRequest, error) {
	m := new(RpcHBRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RpcTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hellworld.RpcTestService",
	HandlerType: (*RpcTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _RpcTestService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HB",
			Handler:       _RpcTestService_HB_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hw.proto",
}

func init() { proto.RegisterFile("hw.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x75, 0x93, 0x46, 0xed, 0x54, 0xa3, 0x0c, 0x82, 0x31, 0x17, 0x43, 0x40, 0xc8, 0x29, 0x48,
	0xf5, 0x20, 0xa2, 0x28, 0x15, 0xa1, 0x97, 0x5e, 0x56, 0x7f, 0x60, 0xcd, 0x0e, 0x36, 0x98, 0x76,
	0x63, 0x36, 0x6d, 0xe9, 0x67, 0xf8, 0x53, 0x7e, 0x97, 0x24, 0xdd, 0xc4, 0x56, 0x7b, 0x7b, 0x8f,
	0x79, 0x6f, 0xdf, 0x63, 0x66, 0x61, 0x7f, 0xbc, 0x88, 0xf3, 0x42, 0x95, 0x0a, 0xbb, 0x63, 0xca,
	0xb2, 0x85, 0x2a, 0x32, 0x19, 0x5e, 0x83, 0xcb, 0xf3, 0xe4, 0x95, 0x74, 0xc9, 0xe9, 0x73, 0x46,
	0xba, 0x44, 0x17, 0xac, 0x54, 0x7a, 0x2c, 0x60, 0x91, 0xc3, 0xad, 0x54, 0x22, 0x42, 0x47, 0x8a,
	0x52, 0x78, 0x56, 0xc0, 0xa2, 0x2e, 0xaf, 0x71, 0xe8, 0xc2, 0x01, 0xcf, 0x93, 0xe1, 0xc0, 0x78,
	0xc2, 0x73, 0x38, 0x34, 0x5c, 0xe7, 0x6a, 0xaa, 0xe9, 0xef, 0x23, 0xe1, 0x03, 0x1c, 0xb5, 0x31,
	0x46, 0x82, 0xd0, 0x49, 0x94, 0x24, 0x23, 0xaa, 0x31, 0x7a, 0xb0, 0x37, 0x21, 0xad, 0xc5, 0x3b,
	0x99, 0xb8, 0x86, 0x86, 0xdf, 0x0c, 0x7a, 0x95, 0x7d, 0xb4, 0xe2, 0xdb, 0x5a, 0x4e, 0xc5, 0xa4,
	0xb1, 0xd5, 0x18, 0x8f, 0xc1, 0x4e, 0x65, 0xdf, 0xb3, 0x03, 0x3b, 0x72, 0x78, 0x05, 0xf1, 0x09,
	0xba, 0x13, 0x91, 0xcf, 0x45, 0x36, 0x23, 0xed, 0x75, 0x02, 0x3b, 0xea, 0xf5, 0x2f, 0xe2, 0x76,
	0x19, 0xf1, 0x5a, 0x40, 0x3c, 0x6a, 0x74, 0xcf, 0xd3, 0xb2, 0x58, 0xf2, 0x5f, 0x9f, 0x7f, 0x07,
	0xee, 0xe6, 0xb0, 0x0a, 0xfa, 0xa0, 0xa5, 0x69, 0x53, 0x41, 0x3c, 0x01, 0xa7, 0x16, 0x98, 0x3e,
	0x2b, 0x72, 0x6b, 0xdd, 0xb0, 0xfe, 0x17, 0x6b, 0x37, 0xfe, 0x42, 0xc5, 0x3c, 0x4d, 0x08, 0x1f,
	0xc1, 0xa9, 0x3a, 0x28, 0x3c, 0x5b, 0xeb, 0xb2, 0x79, 0x15, 0xdf, 0xdf, 0x36, 0x5a, 0x6d, 0x32,
	0xdc, 0xc1, 0x7b, 0xb0, 0x86, 0x03, 0x3c, 0xdd, 0xd4, 0xb4, 0xe7, 0xf1, 0xbd, 0xff, 0x83, 0xc6,
	0x1a, 0xb1, 0x4b, 0xf6, 0xb6, 0x5b, 0x7f, 0x8b, 0xab, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e,
	0x40, 0xb7, 0x1a, 0x22, 0x02, 0x00, 0x00,
}
